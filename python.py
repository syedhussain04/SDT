# -*- coding: utf-8 -*-
"""Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10hHG--4_mfik2IS6jVkwP4nNfvBz7dTN
"""

pip install rdflib

{
  "query": "What are the crimes in District A in 2023?"
}

pip install rdflib

from rdflib import Graph

# Initialize the RDF graph
graph = Graph()

# Sample RDF data (replace with your actual dataset)
rdf_data = """
<http://example.org/crime1> <http://example.org/hasLocation> "District A" .
<http://example.org/crime1> <http://example.org/hasDate> "2023-05-01" .
<http://example.org/crime2> <http://example.org/hasLocation> "District A" .
<http://example.org/crime2> <http://example.org/hasDate> "2023-06-10" .
<http://example.org/crime3> <http://example.org/hasLocation> "District B" .
<http://example.org/crime3> <http://example.org/hasDate> "2023-03-15" .
<http://example.org/crime1> <http://example.org/hasSuspect> <http://example.org/suspect1> .
<http://example.org/crime1> <http://example.org/hasVictim> <http://example.org/victim1> .
<http://example.org/crime2> <http://example.org/hasSuspect> <http://example.org/suspect2> .
<http://example.org/crime2> <http://example.org/hasVictim> <http://example.org/victim2> .
<http://example.org/crime3> <http://example.org/hasSuspect> <http://example.org/suspect3> .
<http://example.org/crime3> <http://example.org/hasVictim> <http://example.org/victim3> .
<http://example.org/crime1> <http://example.org/hasSeverity> "High" .
<http://example.org/crime2> <http://example.org/hasSeverity> "Low" .
<http://example.org/crime3> <http://example.org/hasSeverity> "Medium" .
"""

# Parse the RDF data
graph.parse(data=rdf_data, format="n3")

# Function to execute SPARQL queries
def execute_sparql_query(query):
    results = graph.query(query)
    return results

# 1. Retrieve Crimes by Location and Date
query1 = """
SELECT ?crime ?location ?date WHERE {
    ?crime <http://example.org/hasLocation> "District A" .
    ?crime <http://example.org/hasDate> ?date .
    FILTER (YEAR(?date) = 2023)
} ORDER BY ?date
"""
print("Query 1: Crimes in District A in 2023")
results1 = execute_sparql_query(query1)
for row in results1:
    print(f"Crime: {row['crime']}, Location: {row['location']}, Date: {row['date']}")

# 2. Retrieve Crime and Suspect Relationships
query2 = """
SELECT ?crime ?suspect ?victim WHERE {
    ?crime <http://example.org/hasSuspect> ?suspect .
    ?crime <http://example.org/hasVictim> ?victim .
}
"""
print("\nQuery 2: Crimes and their Suspects/Victims")
results2 = execute_sparql_query(query2)
for row in results2:
    print(f"Crime: {row['crime']}, Suspect: {row['suspect']}, Victim: {row['victim']}")

# 3. Retrieve Crime Types by Severity Level
query3 = """
SELECT ?crime ?severity WHERE {
    ?crime <http://example.org/hasSeverity> "High" .
}
"""
print("\nQuery 3: High Severity Crimes")
results3 = execute_sparql_query(query3)
for row in results3:
    print(f"Crime: {row['crime']}, Severity: {row['severity']}")

# 4. Retrieve Crimes by Type and Location
query4 = """
SELECT ?crimeType ?location (COUNT(?crime) AS ?crimeCount) WHERE {
    ?crime <http://example.org/hasLocation> ?location .
    ?crime <http://example.org/hasType> ?crimeType .
}
GROUP BY ?crimeType ?location
"""
print("\nQuery 4: Crimes by Type and Location")
results4 = execute_sparql_query(query4)
for row in results4:
    print(f"Crime Type: {row['crimeType']}, Location: {row['location']}, Crime Count: {row['crimeCount']}")

# 5. Retrieve Crime Data with Multiple Filters
query5 = """
SELECT ?crime WHERE {
    ?crime <http://example.org/hasType> "Theft" .
    ?crime <http://example.org/hasLocation> "District A" .
    ?crime <http://example.org/hasDate> ?date .
    FILTER (YEAR(?date) = 2023)
}
"""
print("\nQuery 5: Thefts in District A in 2023")
results5 = execute_sparql_query(query5)
for row in results5:
    print(f"Crime: {row['crime']}")

from rdflib import Graph

# Initialize the RDF graph
graph = Graph()

# Parse the RDF data (in this case, sample data)
graph.parse(data=rdf_data, format="n3")

# Execute the SPARQL query
results = graph.query(query)